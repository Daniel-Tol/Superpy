Welcome to the Superpy Usage Guide.

All functions are operated with the command line, this guide will explain how, with plenty of examples.

The functionality of this program can be catogorized into four different functions:

Buy products: 

    With argument 'buy' you can buy products which will be appended to the bought.csv.

    Requires arguments are '--product_name', '--price', '--expiration_date' and '--amount'.
    '--product_name' = Name of the product. Use underscore for multiple words.
    '--price' = Buying price of the product. Requires number and accepts number after decimal point.
    '--expiration_date' = Expiration date of the product. Data format is 'YYYY-MM-DD'.
    '--amount' = The amount of the product to buy. Requires number.

    Each new bought item(s) will be given an unique id automatically.

    For example:

        python main.py buy --product_name orange --price 1 --expiration_date 2023-05-24 --amount 10
        python main.py buy --product_name apple_pie --price 2.5 --expiration_date 2023-12-27 --amount 4

    The result in bought.csv will be:

        id,product_name,buy_date,buy_price,expiration_date,amount
        1,Orange,2023-04-18,1.00,2023-05-24,10
        2,Apple Pie,2023-04-18,2.50,2023-12-27,4
    
Sell products:

    With argument 'sell' you can sell the products from bought.csv which will be appended to sold.csv.

    Requires arguments are '--product_name', '--price', '--expiration_date' and '--amount'.
    '--product_name' = Name of the product. Use underscore for multiple words.
    '--price' = Buying price of the product. Requires number and accepts number after decimal point.
    '--amount' = The amount of the product to buy. Requires number.

    Note that the product name has to be the same as the one in bought.csv.
    If the product (amount) is not in bought.csv an error message will be shown that the product (amount) is not in stock.

    Each new bought item(s) will be given an unique id automatically.
    The first avialable linked id of the product of bought.csv will be given automatically.

    For example:

        python main.py buy --product_name apple_pie --price 2.5 --expiration_date 2023-12-27 --amount 4
        python main.py sell --product_name apple_pie --price 4.0 --amount 2
        python main.py sell --product_name apple_pie --price 4.0 --amount 2

    The result in sold.csv will be: 

        id,bought_id,sell_date,sell_price,amount
        1,1,2023-04-18,4.00,2
        2,1,2023-04-18,4.00,2

    Note that 'bough_id' has the same id twice. Since the product amount of id 1 was 4, now all stock has been sold.
    In case there are products in stock with the same product name but different id, the sold.csv rows will be split. 

    For example:

        python main.py buy --product_name apple_pie --price 2.5 --expiration_date 2023-12-27 --amount 4
        python main.py buy --product_name apple_pie --price 2.5 --expiration_date 2023-12-27 --amount 4
        python main.py sell --product_name apple_pie --price 4.0 --amount 3
        python main.py sell --product_name apple_pie --price 4.0 --amount 3

    The result in sold.csv will be: 

        id,bought_id,sell_date,sell_price,amount
        1,1,2023-04-18,4.00,3
        2,1,2023-04-18,4.00,1
        3,2,2023-04-18,4.00,2

    Even though sell command has been called twice, three rows are made. 
    The sell command will look for the first available amount and if the id is different, it will split the rows.

Changing the time:

    In date.txt is the current date of today. 

    You can change the current date with the commands '--advance_time', '--reverse_time' and '--correct_time'.
    '--advance_time' = Advances days by number count. Requires number.
    '--reverse_time'= Reverses days by number count. Requires number.
    '--correct_time' = Changes date to current official date. No value needed.
    '--set_time' = Set a specific date. Data format is 'YYYY-MM-DD'.

    For example, the day today is 2023-04-18 and the command line is:

        python main.py --advance_time 2

    Now the day is 2023-04-20 inside the text file. 

    You can reverse the time with:

        python main.py --reverse_time 4

    Now the day is 2023-04-16 inside the text file.
    You can change the time to the current date with:

        python main.py --correct_time

    Now the day is 2023-04-18 inside the text file.
    You can set the time to a specific date with:

        python main.py --set_time 2023-05-15

    Please note that advancing and reversing the time and buying and selling products will result in buy and sell date having the changed date.
    So when buying a product with an advanced date and selling it on a reversed date will result in an error message the product is not in stock.
    If the date is a later date than the expiration date of a product, the product will no longer be sold.

Report:

    With 'report' you can report specific data. For that you will need an additional argument.
    You can choose between 'inventory', 'sold', 'expires', 'revenue' or 'profit'.

    'inventory' = Reports products currently in inventory.
    'sold' = Reports products that are sold.
    'expires' = Reports products that are expired.
    'revenue' = Reports revenue.
    'profit' = Reports profit.

    After that you will need to specify the time with an date argument. 
    For 'inventory', date arguments '--today', '--yesterday' and '--date' are used.

    '--today' = Reports products sold today. No value needed.
    '--yesterday'= Reports products yesterday. No value needed.
    '--date' = Reports products from specific date. Data format is 'YYYY-MM-DD'.

    All other additional arguments have two additional date arguments called 'start_date' and '--end_date'.
    And the '--date' has two additional data formats.

    '--start_date' = Start of report range. Data format is 'YYYY-MM-DD'.
    '--end_date' = End of report range. Data format is 'YYYY-MM-DD'.
    '--date' = Reports from specific date(s). Data formats are 'YYYY-MM-DD', 'YYYY-MM' and 'YYYY'.
    
    'expires' has yet another two additional date arguments called '--tomorrow' and '--within_one_week'.

    '--tomorrow' = Reports products expering tomorrow. No value needed.
    '--within_one_week' = Reports products expiring within one week. No value needed.

    All date arguments can in theory be called in the same command. 
    If both 'start_date' and '--end_date' are used, they will be used together.

    Let's start with some examples for '--today' and '--yesterday' with 'inventory'. 

    For example the content inside bought.csv is:

        id,product_name,buy_date,buy_price,expiration_date,amount
        1,Orange,2023-04-17,1.00,2023-05-03,10
        2,Apple Pie,2023-04-18,2.50,2023-05-15,4
        3,Milk,2023-04-19,0.50,2023-04-29,2

    The day today is 2023-04-18 and the command lines are: 

        python main.py sell --product_name orange --price 2 --expiration_date 2023-05-03 --amount 5
        python main.py report inventory --today
        python main.py report inventory --yesterday

    The results will be

                    Inventory today
    ┏━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓
    ┃ Product Name ┃ Count ┃ Buy Price ┃ Expiration Date ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩
    │       Orange │ 5     │      1.00 │      2023-05-03 │
    │    Apple Pie │ 2     │      2.50 │      2023-05-15 │
    └──────────────┴───────┴───────────┴─────────────────┘

                    Inventory yesterday
    ┏━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓
    ┃ Product Name ┃ Count ┃ Buy Price ┃ Expiration Date ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩
    │       Orange │ 10    │      1.00 │      2023-05-03 │
    └──────────────┴───────┴───────────┴─────────────────┘

    Since the oranges were sold today and were still in stock yesterday, count today is reduced to 5.
    Since the apple pies were bought today and weren't in stock yesterday, they will only show up in 'Inventory today'.

    Let's try a '--date' example with command lines:

        python main.py report inventory --date 2023-04-19
        python main.py report inventory --date 2023-04-30

                    Inventory on 19 April, 2023
    ┏━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓
    ┃ Product Name ┃ Count ┃ Buy Price ┃ Expiration Date ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩
    │       Orange │ 5     │      1.00 │      2023-05-03 │
    │    Apple Pie │ 4     │      2.50 │      2023-05-15 │
    │         Milk │ 2     │      0.50 │      2023-04-29 │
    └──────────────┴───────┴───────────┴─────────────────┘

                    Inventory on 30 April, 2023
    ┏━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓
    ┃ Product Name ┃ Count ┃ Buy Price ┃ Expiration Date ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩
    │       Orange │ 5     │      1.00 │      2023-05-03 │
    │    Apple Pie │ 4     │      2.50 │      2023-05-15 │
    └──────────────┴───────┴───────────┴─────────────────┘

    On 2023-04-19 some milk is bought so it will show up in the inventory on 19 April, 2023.
    Since the milk has an expiration date of 2023-04-29, it will no longer show up in the inventory on 30 April, 2023.

    For '--start_date' and '--end_date' examples, first let's sell some more products of the same inventory as the previous examples.

    The current date is 2023-04-18 and the command lines are:

        python main.py --reverse_time 1 
        python main.py sell --product_name orange --price 2 --expiration_date 2023-05-03 --amount 5
        python main.py --advance_time 10
        python main.py sell --product_name apple_pie --price 5 --expiration_date 2023-05-15 --amount 3

    Now the inside of sold.csv is:

        id,bought_id,sell_date,sell_price,amount
        1,1,2023-04-18,2.00,5
        2,1,2023-04-17,2.00,5
        3,2,2023-04-28,5.00,3

    Now for the '--start_date' and '--end_date' examples:

        python main.py report sold --start_date 2023-04-20
        python main.py report sold --end_date 2023-04-20
        python main.py report sold --start_date 2023-04-18 --end_date 2023-04-30

    The result will be:

            Sold on and after 20 April, 2023
    ┏━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┓
    ┃ Product Name ┃ Count ┃ Sell Price ┃  Sell Date ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━┩
    │    Apple Pie │ 3     │       5.00 │ 2023-04-28 │
    └──────────────┴───────┴────────────┴────────────┘

            Sold on and before 20 April, 2023
    ┏━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┓
    ┃ Product Name ┃ Count ┃ Sell Price ┃  Sell Date ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━┩
    │       Orange │ 5     │       2.00 │ 2023-04-18 │
    │       Orange │ 5     │       2.00 │ 2023-04-17 │
    └──────────────┴───────┴────────────┴────────────┘

        Sold between 18 April, 2023 and 30 April, 2023  
    ┏━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┓
    ┃ Product Name ┃ Count ┃ Sell Price ┃  Sell Date ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━┩
    │       Orange │ 5     │       2.00 │ 2023-04-18 │
    │    Apple Pie │ 3     │       5.00 │ 2023-04-28 │
    └──────────────┴───────┴────────────┴────────────┘

    If only the '--start_date' argument has been given, it will only report the sold products on or after that date.
    If only the '--end_date' argument has been given, it will only report the sold products on or before that date.
    If both the '--start_date' and '--end_date' have been given, it will report the sold products between the start date and the end date.
    In case the '--end_date' is an earlier date than the '--start_date' an error will be given.

    For the additional date formats examples, let's report the expired products:

        python main.py report expires --date 2023-04
        python main.py report expires --date 2023-05
        python main.py report expires --date 2023

    The results will be:

                    Expires in April, 2023
    ┏━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┓
    ┃ Product Name ┃ Count ┃ Buy Price ┃ Expiration Day ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━┩
    │         Milk │ 2     │      0.50 │             29 │
    └──────────────┴───────┴───────────┴────────────────┘

                        Expires in May, 2023
    ┏━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┓
    ┃ Product Name ┃ Count ┃ Buy Price ┃ Expiration Day ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━┩
    │    Apple Pie │ 1     │      2.50 │             15 │
    └──────────────┴───────┴───────────┴────────────────┘

                        Expires in 2023
    ┏━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓
    ┃ Product Name ┃ Count ┃ Buy Price ┃ Expiration Date ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩
    │    Apple Pie │ 1     │      2.50 │           05-15 │
    │         Milk │ 2     │      0.50 │           04-29 │
    └──────────────┴───────┴───────────┴─────────────────┘

    When only given a year and a month, it will report all products within that month.
    When only given a year, it will report all products within that year.
    
    Note: If a product has been sold, it will not appear in the expired report, even if the report is on a date before the product was sold.

    The '--tomorrow' and '--within_one_week' are exclusively used by 'expired' to view what will expire soon.

    The current date is 2023-04-28 and the command lines are:

        python main.py report expires --tomorrow
        python main.py report expires --within_one_week

    The result will be:

                Expires tomorrow
    ┏━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━┓
    ┃ Product Name ┃ Count ┃ Buy Price ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━┩
    │         Milk │ 2     │      0.50 │
    └──────────────┴───────┴───────────┘

                    Expires within one week
    ┏━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓
    ┃ Product Name ┃ Count ┃ Buy Price ┃ Expiration Date ┃
    ┡━━━━━━━━━━━━━━╇━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩
    │         Milk │ 2     │      0.50 │      2023-04-29 │
    └──────────────┴───────┴───────────┴─────────────────┘

    Since the date is 2023-04-28 and the expiration date of the milk is 2023-04-29, the milk will expire tomorrow.
    It will expire within the next week, so it shows up in that report as well.

    'inventory' has a notable difference with the other four avialable arguments.
    It report the available inventory on the given date, whereas the other arguments report the data of that specific date.

    For example, the current date is 2023-04-28 and the command lines are: 

        python main.py report revenue --today
        python main.py report profit --date 2023-04

    The result will be:

        Today's revenue so far: 15.0
        Profit from April, 2023: 17.5

    The revenue report will only include the revenue made of that specific date.
    To include more dates, the other arguments have the extra option to report the entire month of a year, or an entire year.

Additional guiding can be given by using the '-h' or '--help' arguments on the argument you need help with.

For example:

    python main.py -h
    python main.py buy --help
    python main.py report expired --help

Thank you for using Superpy.